use mavenmovies;

-- Basic Aggregate Functions:

-- Question 1: Retrieve the total number of rentals made in the Sakila database.
-- Hint: Use the COUNT() function.

SELECT 
    COUNT(*) Total_Rentals
FROM
    rental;
    
-- Question 2: Find the average rental duration (in days) of movies rented from the Sakila database.
-- Hint: Utilize the AVG() function.

SELECT 
    AVG(rental_duration) Avg_Rental_Duration
FROM
    film;

-- String Functions:

-- Question 3: Display the first name and last name of customers in uppercase.
-- Hint: Use the UPPER () function.

SELECT 
    UPPER(first_name), UPPER(last_name)
FROM
    customer;

-- Question 4: Extract the month from the rental date and display it alongside the rental ID.
-- Hint: Employ the MONTH() function.

SELECT 
    MONTH(rental_date) Rental_Month, rental_id
FROM
    rental;

-- GROUP BY:

-- Question 5: Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
-- Hint: Use COUNT () in conjunction with GROUP BY.

SELECT 
    customer_id, COUNT(*) Rental_Count
FROM
    rental
GROUP BY customer_id;

-- Question 6: Find the total revenue generated by each store.
-- Hint: Combine SUM() and GROUP BY.

SELECT 
    s.store_id, SUM(p.amount) Total_Revenue
FROM
    store s
        LEFT JOIN
    customer c ON s.store_id = c.store_id
        LEFT JOIN
    payment p ON c.customer_id = p.customer_id
GROUP BY s.store_id;

-- Joins:

-- Question 7: Display the title of the movie, customer's first name, and last name who rented it.
-- Hint: Use JOIN between the film, inventory, rental, and customer tables.

SELECT 
    f.title, c.first_name, c.last_name
FROM
    film f
        LEFT JOIN
    inventory i ON f.film_id = i.film_id
        LEFT JOIN
    rental r ON i.inventory_id = r.inventory_id
        LEFT JOIN
    customer c ON r.customer_id = c.customer_id
;

-- Question 8: Retrieve the names of all actors who have appeared in the film "Gone with the Wind."
-- Hint: Use JOIN between the film actor, film, and actor tables.

SELECT 
    CONCAT(a.first_name, ' ', a.last_name) Name, f.title
FROM
    actor a
        JOIN
    film_actor fa ON a.actor_id = fa.actor_id
        JOIN
    film f ON fa.film_id = f.film_id
WHERE
    title LIKE 'Gone with the Wind';
    
-- GROUP BY:

-- Question 1: Determine the total number of rentals for each category of movies.
-- Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY.

SELECT 
    fc.category_id,
    c.name AS category_name,
    COUNT(r.rental_id) AS total_rentals
FROM
    film_category fc
        JOIN
    inventory i ON fc.film_id = i.film_id
        JOIN
    rental r ON i.inventory_id = r.inventory_id
        JOIN
    category c ON fc.category_id = c.category_id
GROUP BY fc.category_id , c.name;

-- Question 2: Find the average rental rate of movies in each language.
-- Hint: JOIN film and language tables, then use AVG () and GROUP BY.

SELECT 
    l.name Language, AVG(rental_rate)
FROM
    language l
        LEFT JOIN
    film f ON l.language_id = f.language_id
GROUP BY language;

-- Joins:

-- Question 3: Retrieve the customer names along with the total amount they've spent on rentals.
-- Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY.

SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) Name,
    SUM(amount) Total_Amount
FROM
    customer c
        LEFT JOIN
    payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id;

-- Question 4: List the titles of movies rented by each customer in a particular city (e.g., 'London').
-- Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY

SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    ct.city,
    f.title AS rented_movie_title
FROM
    customer c
        JOIN
    address a ON c.address_id = a.address_id
        JOIN
    city ct ON a.city_id = ct.city_id
        JOIN
    rental r ON c.customer_id = r.customer_id
        JOIN
    inventory i ON r.inventory_id = i.inventory_id
        JOIN
    film f ON i.film_id = f.film_id
ORDER BY c.customer_id , ct.city , rented_movie_title;

-- Advanced Joins and GROUP BY:

-- Question 5: Display the top 5 rented movies along with the number of times they've been rented.
-- Hint: JOIN film, inventory, and rental tables, then use cOUNT() and GROUP BY, and limit the results.

SELECT 
    f.title, COUNT(rental_id) Total_Rented
FROM
    film f
        JOIN
    inventory i ON f.film_id = i.film_id
        JOIN
    rental r ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY Total_Rented DESC
LIMIT 5;

-- Question 6: Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
-- Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY.

SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    COUNT(DISTINCT s.store_id) Store_Count
FROM
    customer c
        JOIN
    rental r ON c.customer_id = r.customer_id
        JOIN
    inventory i ON r.inventory_id = i.inventory_id
        JOIN
    store s ON i.store_id = s.store_id
WHERE
    s.store_id IN (1 , 2)
GROUP BY c.customer_id , c.first_name , c.last_name
HAVING COUNT(DISTINCT s.store_id) = 2;
